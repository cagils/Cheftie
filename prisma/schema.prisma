// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  recipes       Recipe[]
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  @@map(name: "users")
}

enum Role {
  USER
  ADMIN
}

model Recipe {
  id          String            @id @default(cuid())
  title       String
  shortDesc   String
  serving     Int
  difficulty  Difficulty        @default(MEDIUM)
  time        Int
  ingredients IngredientGroup[]
  description Description?
  User        User              @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model IngredientGroup {
  id        String       @id @default(cuid())
  order     Int
  name      String
  list      Ingredient[]
  Recipe    Recipe       @relation(fields: [recipeId], references: [id])
  recipeId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Ingredient {
  id                String          @id @default(cuid())
  order             Int
  desc              String
  IngredientGroup   IngredientGroup @relation(fields: [ingredientGroupId], references: [id])
  ingredientGroupId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Description {
  id        String   @id @default(cuid())
  text      String
  Recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
